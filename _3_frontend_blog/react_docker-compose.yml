# docker-compose --version
# docker-compose -v
# docker-compose up
# docker-compose up -d
# docker-compose -f react_docker-compose.yml up
# docker-compose -f react_docker-compose.yml up -d
# docker-compose down
# docker-compose restart
# docker-compose ps

# restart: on-failure
# restart: no => default olandır. Yani docker compose otomatik olarak restart yapsın
# restart: unless-stopped => Konteynar durduğunda otomatik olarak yeniden başlasın
# restart: always => Konteynar her zaman otomatik başlasın
# restart: on-failure => konteryanar çökmesi halinde otomatik başlasın

########################################################################################################################
########################################################################################################################

# $ docker run --name some-nginx -v /some/content:/usr/share/nginx/html:ro -d nginx
# $ docker run --rm --entrypoint=cat nginx /etc/nginx/nginx.conf > /host/path/nginx.conf
# Services
services:

  # Nginx Services
  webserver:
    image: nginx:alpine
    container_name: nginx_webserver
    restart: always
    ports:
      - "80:80"
      - "443:443"
    #volumes:
      #- ./nginx.conf:/etc/nginx/nginx.conf
    networks:
      - springreactpostres
    depends_on:
      - frontend

  # Frontend
  frontend:
    container_name: react_js
    image: react_js
    restart: always
    build: ./
    #build: ./dizinAdi
    #build:
      #context: .
      #dockerfile: Postgres_Dockerfile
    ports:
      - "3333:3000"
    networks:
      - springreactpostres


# Networks
networks:
  springreactpostres:
    name: springreactpostres
    driver: bridge


########################################################################################################################
########################################################################################################################
# docker ps
# winpty docker container  exec -it  blog_react bash

# docker-compose down
# docker volume ls
# docker volume inspect mysql_volume_data

# docker-compose down
# docker volume rm mysql_volume_data

# winpty docker run -it --rm \
# -v docker_apache_tomcat-conf://usr/local/tomcat/conf  \
# -v docker_apache_tomcat-logs://usr/local/tomcat/logs \
# -v docker_apache_tomcat-webapps://usr/local/tomcat/webapps \
# blog_react bash

# ls -al
# cd usr/local/tomcat/logs
# ls -al
# cd usr/local/tomcat/webapps
# Bu komut şunları yapar:

# docker run: Yeni bir container çalıştırır.
# -it: İnteraktif terminal modunda çalıştırır.
# --rm: Container kapatıldığında otomatik olarak siler.
# -v tomcat-logs:/data: tomcat-logs volume'unu container içindeki /data dizinine bağlar.
# ubuntu: Ubuntu tabanlı bir container çalıştırır.
# bash: Container içinde bash shell çalıştırır.


# deploy kısmında, Swarm dağıtımı için ayarları yapıyoruz.
# 3 kopya (replicas: 3) oluşturulacak, güncelleme yapılandırması
# ve yeniden başlatma politikası belirlenmiştir.